package cn.redarmy.service.impl;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import cn.redarmy.domain.CommentInfo;
import cn.redarmy.domain.CustomerInfo;
import cn.redarmy.domain.TaskInfo;
import cn.redarmy.domain.UpdateData;
import cn.redarmy.service.GoodService.GoodService;

final class GetConnection {
	/**
	 * Uses DriverManager.
	 */
	static Connection getSimpleConnection() throws SQLException {
		Connection conn = null;
		// See your driver documentation for the proper format of this string :
		String DB_CONN_STRING = "jdbc:mysql://localhost:3306/renpindatabase";
		// Provided by your driver documentation. In this case, a MySql driver
		// is used :
		String DRIVER_CLASS_NAME = "com.mysql.jdbc.Driver";
		String USER_NAME = "root";
		String PASSWORD = "admin";
		conn = DriverManager.getConnection(DB_CONN_STRING, USER_NAME, PASSWORD);

		try {
			Class.forName(DRIVER_CLASS_NAME).newInstance();
		} catch (Exception ex) {
			log("Check classpath. Cannot load db driver: " + DRIVER_CLASS_NAME);
		}

		try {
			conn = DriverManager.getConnection(DB_CONN_STRING, USER_NAME,
					PASSWORD);
		} catch (SQLException e) {

			log("Driver loaded, but cannot connect to db: " + DB_CONN_STRING);
			e.printStackTrace();
		}
		return conn;
	}

	private static void log(Object aObject) {
		System.out.println(aObject);
	}
}

public class GoodServiceImpl implements GoodService {

	@Override
	public List<TaskInfo> GetTaskInfo(String strType) {
		List<TaskInfo> tasks = new ArrayList<TaskInfo>();
		Connection connect = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			connect = GetConnection.getSimpleConnection();
			stmt = connect.createStatement();
			String strSQL = "";
			if (strType.equals("1")) {
				strSQL = "select * from task_help_opera_table";
			} else if (strType.equals("2")) {
				strSQL = "select * from task_share_opera_table";
			}
			rs = stmt.executeQuery(strSQL);
			tasks.clear();
			// 获取系统当前时间
			SimpleDateFormat formatter = new SimpleDateFormat(
					"yyyy年MM月dd日HH:mm:ss");
			Date curDate = new Date(System.currentTimeMillis());// 获取当前时间
			String strCurrentTime = formatter.format(curDate);

			while (rs.next()) {
				// 任务发布时间
				String strAnnounceTime = rs.getString(18);
				Date d1 = formatter.parse(strCurrentTime);
				Date d2 = formatter.parse(strAnnounceTime);
				long diff = d1.getTime() - d2.getTime();// 这样得到的差值是微秒级别
				TaskInfo task = new TaskInfo(rs.getString(16),
						rs.getString(22), rs.getString(2), rs.getString(15),
						rs.getInt(1) + "", rs.getDouble(20), rs.getDouble(21),
						strAnnounceTime, rs.getString(23), rs.getString(17),
						diff / 1000 + "", rs.getString(3), rs.getInt(24),
						rs.getInt(25), rs.getInt(14), rs.getInt(4),
						rs.getInt(5), rs.getInt(6), rs.getInt(7), rs.getInt(8),
						0, rs.getString(10), rs.getString(11),
						rs.getString(12), rs.getString(13));
				tasks.add(task);
			}
		} catch (Exception e) {
			System.out.print("get data error!");
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (connect != null) {
				try {
					connect.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return tasks;
	}

	@Override
	public int RegisterCustomer(String strBase64Icon, String strPersonName,
			String strPassword, String strCreditValue, String strCharmValue) {
		int nRetType = 1;// 为0表示成功,1表示失败,2表示账号重名
		Connection connect = null;
		Statement stmt = null;
		ResultSet rs = null;
		boolean bIsFind = false;
		try {
			connect = GetConnection.getSimpleConnection();
			stmt = connect.createStatement();
			// 先判断要注册的账号是否存在
			String strSQL = "select * from customer_info_table where Account = '";
			strSQL += strPersonName;
			strSQL += "'";
			rs = stmt.executeQuery(strSQL);
			while (rs.next()) {
				// 如果找到了
				bIsFind = true;
				nRetType = 2;
				break;
			}
			// 如果没有找到,那么就注册用户
			if (!bIsFind) {

				int nCreditValue = Integer.parseInt(strCreditValue);
				int nCharmValue = Integer.parseInt(strCharmValue);
				strSQL = "insert into customer_info_table values('";
				strSQL += strBase64Icon;
				strSQL += "','";
				strSQL += strPersonName;
				strSQL += "','";
				strSQL += strPassword;
				strSQL += "','','','','','','','0','0','1','";
				strSQL += nCreditValue;
				strSQL += "','";
				strSQL += nCharmValue;
				strSQL += "')";
				stmt.execute(strSQL);
				nRetType = 0;
			}
		} catch (Exception e) {
			System.out.print("get data error!");
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (connect != null) {
				try {
					connect.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return nRetType;
	}

	@Override
	public CustomerInfo LogIn(String strPersonName, String strPassword) {
		CustomerInfo customer = null;
		Connection connect = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			connect = GetConnection.getSimpleConnection();
			stmt = connect.createStatement();
			// 先判断要注册的账号是否存在
			String strSQL = "select * from customer_info_table where Account = '";
			strSQL += strPersonName;
			strSQL += "'";
			strSQL += " and Password = '";
			strSQL += strPassword;
			strSQL += "'";
			rs = stmt.executeQuery(strSQL);
			while (rs.next()) {
				customer = new CustomerInfo(rs.getString(8), rs.getString(9),
						rs.getInt(10), rs.getInt(11), rs.getString(1),
						rs.getInt(13), rs.getInt(14));
				break;
			}
		} catch (Exception e) {
			System.out.print("get data error!");
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (connect != null) {
				try {
					connect.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return customer;
	}

	@Override
	public int AddTaskInfo(String strTaskType, String strRegionName,
			String strTaskTitle, String strTaskDeatial,
			String strTaskAnnounceTime, String strTaskImpleTime,
			String strTaskAccountName, String strImplementAccountName,
			String strLongitude, String strLatidude, String strTaskAccountIcon,
			String strLimitTime) {
		int nRetType = 1;// 为0表示成功,1表示失败
		Connection connect = null;
		Statement stmt = null;
		ResultSet rs = null;
		int nTaskCount = 0;
		try {
			connect = GetConnection.getSimpleConnection();
			stmt = connect.createStatement();
			String strSQL = "";
			// 如果该任务为求助类型
			if (strTaskType.equals("1")) {
				// 先获取任务数量
				strSQL = "select * from task_help_opera_table";
				rs = stmt.executeQuery(strSQL);
				while (rs.next()) {
					rs.last();
					nTaskCount = rs.getRow();
					break;
				}
				nTaskCount += 1;
				String strTaskCount = nTaskCount + "";
				// 将新的任务插入到数据库中
				SimpleDateFormat formatter = new SimpleDateFormat(
						"yyyy年MM月dd日HH:mm:ss");
				Date curDate = new Date(System.currentTimeMillis());// 获取当前时间
				strTaskAnnounceTime = formatter.format(curDate);
				int nTaskType = Integer.parseInt(strTaskType);
				String strCommentTableName = strTaskCount + "_h1";
				// 创建评论表
				strSQL = "create table ";
				strSQL += strCommentTableName;
				strSQL += "(";
				strSQL += "TaskKey varchar(20),TaskTalkTime varchar(20),TaskTalkPersonName varchar(20),TaskTalkAcceptPeraonName varchar(20),TaskTalkContent varchar(140),TaskAccountImage varchar(20000))";
				stmt.execute(strSQL);
				// 将相应的数据插入到任务操作表中
				strSQL = "insert into task_help_opera_table values('";
				strSQL += nTaskCount;
				strSQL += "','";
				strSQL += strTaskAccountName;
				strSQL += "','";
				strSQL += strImplementAccountName;
				strSQL += "','1','1','1','1','1','";
				strSQL += strCommentTableName;
				strSQL += "','','','','','";
				strSQL += nTaskType;
				strSQL += "','";
				strSQL += strTaskTitle;
				strSQL += "','";
				strSQL += strRegionName;
				strSQL += "','";
				strSQL += strTaskDeatial;
				strSQL += "','";
				strSQL += strTaskAnnounceTime;
				strSQL += "','";
				strSQL += strTaskImpleTime;
				strSQL += "','";
				strSQL += strLongitude;
				strSQL += "','";
				strSQL += strLatidude;
				strSQL += "','";
				strSQL += strTaskAccountIcon;
				strSQL += "','";
				strSQL += strLimitTime;
				strSQL += "','1','1')";
				stmt.execute(strSQL);
				// 将更新标志设为更新状态,通知所有用户
				strSQL = "update customer_info_table";
				strSQL += " set UpdateSignal = '1'";
				stmt.executeUpdate(strSQL);

				nRetType = 0;
			} else if (strTaskType.equals("2")) {// 如果该任务为分享
				// 先获取任务数量
				strSQL = "select * from task_share_opera_table";
				rs = stmt.executeQuery(strSQL);
				while (rs.next()) {
					rs.last();
					nTaskCount = rs.getRow();
					break;
				}
				nTaskCount += 1;
				String strTaskCount = nTaskCount + "";
				// 将新的任务插入到数据库中
				SimpleDateFormat formatter = new SimpleDateFormat(
						"yyyy年MM月dd日HH:mm:ss");
				Date curDate = new Date(System.currentTimeMillis());// 获取当前时间
				strTaskAnnounceTime = formatter.format(curDate);
				int nTaskType = Integer.parseInt(strTaskType);
				String strCommentTableName = strTaskCount + "_s1";
				// 创建评论表
				strSQL = "create table ";
				strSQL += strCommentTableName;
				strSQL += "(";
				strSQL += "TaskKey varchar(20),TaskTalkTime varchar(20),TaskTalkPersonName varchar(20),TaskTalkAcceptPeraonName varchar(20),TaskTalkContent varchar(140),TaskAccountImage varchar(20000))";
				stmt.execute(strSQL);
				// 将相应的数据插入到任务操作表中
				strSQL = "insert into task_share_opera_table values('";
				strSQL += nTaskCount;
				strSQL += "','";
				strSQL += strTaskAccountName;
				strSQL += "','";
				strSQL += strImplementAccountName;
				strSQL += "','1','1','1','1','1','";
				strSQL += strCommentTableName;
				strSQL += "','','','','','";
				strSQL += nTaskType;
				strSQL += "','";
				strSQL += strTaskTitle;
				strSQL += "','";
				strSQL += strRegionName;
				strSQL += "','";
				strSQL += strTaskDeatial;
				strSQL += "','";
				strSQL += strTaskAnnounceTime;
				strSQL += "','";
				strSQL += strTaskImpleTime;
				strSQL += "','";
				strSQL += strLongitude;
				strSQL += "','";
				strSQL += strLatidude;
				strSQL += "','";
				strSQL += strTaskAccountIcon;
				strSQL += "','";
				strSQL += strLimitTime;
				strSQL += "','1','1')";
				stmt.execute(strSQL);
				// 将更新标志设为更新状态,通知所有用户
				strSQL = "update customer_info_table";
				strSQL += " set UpdateSignal = '1'";
				stmt.executeUpdate(strSQL);

				nRetType = 0;
			}
		} catch (Exception e) {
			System.out.print("get data error!");
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (connect != null) {
				try {
					connect.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return nRetType;
	}

	@Override
	public int SelectTask(String strTaskId, String strPersonName, String strType) {
		int nRetType = 0;// 0表示失败,为1表示成功,2表示该任务已有人拿下
		Connection connect = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			connect = GetConnection.getSimpleConnection();
			stmt = connect.createStatement();
			int nTaskId = Integer.parseInt(strTaskId);
			String strSQL = "";
			// 如果为求助任务
			if (strType.equals("1")) {
				// 先判断该任务是否被其他人选择了
				strSQL = "select * from task_help_opera_table where TaskKey = '";
				strSQL += nTaskId;
				strSQL += "'";
				rs = stmt.executeQuery(strSQL);
				String strTaskAccountName = "";
				int nTaskSelectType = 1;
				while (rs.next()) {
					// 获取任务处理类型
					nTaskSelectType = rs.getInt(4);
					// 获取任务发布人
					strTaskAccountName = rs.getString(2);
					break;
				}
				// 如果为空,则表明该任务还没有其他人选择
				if (1 == nTaskSelectType) {
					// 更新task_opera_table表
					strSQL = "update task_help_opera_table";
					strSQL += " set TaskSelectType = '2',TaskImplementStatus = '2',TaskImplementAccount = '";
					strSQL += strPersonName;
					strSQL += "' where TaskKey = '";
					strSQL += nTaskId;
					strSQL += "'";
					stmt.executeUpdate(strSQL);

					// 将更新标志设为更新状态
					strSQL = "update customer_info_table";
					strSQL += " set UpdateSignal = '1' where Account = '";
					strSQL += strTaskAccountName;
					strSQL += "' or Account = '";
					strSQL += strPersonName;
					strSQL += "'";
					stmt.executeUpdate(strSQL);

					nRetType = 1;
				} else {
					nRetType = 2;
				}
			} else if (strType.equals("2")) {// 如果为分享任务
				// 先判断该任务是否被其他人选择了
				strSQL = "select * from task_share_opera_table where TaskKey = '";
				strSQL += nTaskId;
				strSQL += "'";
				rs = stmt.executeQuery(strSQL);
				String strTaskAccountName = "";
				int nTaskSelectType = 1;
				while (rs.next()) {
					// 获取任务处理类型
					nTaskSelectType = rs.getInt(4);
					// 获取任务发布人
					strTaskAccountName = rs.getString(2);
					break;
				}
				// 如果为空,则表明该任务还没有其他人选择
				if (1 == nTaskSelectType) {
					// 更新task_opera_table表
					strSQL = "update task_share_opera_table";
					strSQL += " set TaskSelectType = '2',TaskImplementStatus = '2',TaskImplementAccount = '";
					strSQL += strPersonName;
					strSQL += "' where TaskKey = '";
					strSQL += nTaskId;
					strSQL += "'";
					stmt.executeUpdate(strSQL);

					// 将更新标志设为更新状态
					strSQL = "update customer_info_table";
					strSQL += " set UpdateSignal = '1' where Account = '";
					strSQL += strTaskAccountName;
					strSQL += "' or Account = '";
					strSQL += strPersonName;
					strSQL += "'";
					stmt.executeUpdate(strSQL);

					nRetType = 1;
				} else {
					nRetType = 2;
				}
			}
		} catch (Exception e) {
			System.out.print("get data error!");
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (connect != null) {
				try {
					connect.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return nRetType;
	}

	@Override
	public List<TaskInfo> GetMsgInfoNum(String strAnnounceName) {
		List<TaskInfo> dynamicnews = new ArrayList<TaskInfo>();
		int nNum = 0;
		Connection connect = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			connect = GetConnection.getSimpleConnection();
			stmt = connect.createStatement();
			// strAnnounceName作为发布者时的动态
			String strSQL = "select * from task_help_opera_table where TaskAccount = '";
			strSQL += strAnnounceName;
			strSQL += "'";
			strSQL += " and (TaskSelectType = '2' or TaskFinishType = '2' or TaskImplementCommentType = '2') and TaskType = '1'";
			rs = stmt.executeQuery(strSQL);
			while (rs.next()) {
				rs.last();
				nNum = rs.getRow();
			}

			if (rs != null) {
				rs.close();
				rs = null;
			}

			// strAnnounceName作为分享者的动态
			strSQL = "select * from task_share_opera_table where TaskAccount = '";
			strSQL += strAnnounceName;
			strSQL += "'";
			strSQL += " and (TaskSelectType = '2' or TaskVerifiType = '2' or TaskImplementCommentType = '2') and TaskType = '2'";
			rs = stmt.executeQuery(strSQL);
			while (rs.next()) {
				rs.last();
				nNum += rs.getRow();
			}

			if (rs != null) {
				rs.close();
				rs = null;
			}

			// strAnnounceName作为执行者的动态
			strSQL = "select * from task_help_opera_table where TaskImplementAccount = '";
			strSQL += strAnnounceName;
			strSQL += "'";
			strSQL += " and (TaskVerifiType = '2' or TaskAnnounceCommentType = '2') and TaskType = '1'";
			rs = stmt.executeQuery(strSQL);
			while (rs.next()) {
				rs.last();
				nNum += rs.getRow();
			}

			if (rs != null) {
				rs.close();
				rs = null;
			}

			// strAnnounceName作为接收者的动态
			strSQL = "select * from task_share_opera_table where TaskImplementAccount = '";
			strSQL += strAnnounceName;
			strSQL += "'";
			strSQL += " and (TaskFinishType = '2' or TaskAnnounceCommentType = '2') and TaskType = '2'";
			rs = stmt.executeQuery(strSQL);
			while (rs.next()) {
				rs.last();
				nNum += rs.getRow();
			}

			if (rs != null) {
				rs.close();
				rs = null;
			}
			// 针对求助任务和求助分享
			strSQL = "select * from task_help_opera_table where TaskAccount = '";
			strSQL += strAnnounceName;
			strSQL += "' or TaskImplementAccount = '";
			strSQL += strAnnounceName;
			strSQL += "' union select * from task_share_opera_table where TaskAccount = '";
			strSQL += strAnnounceName;
			strSQL += "' or TaskImplementAccount = '";
			strSQL += strAnnounceName;
			strSQL += "' order by TaskAnnounceTime DESC";
			rs = stmt.executeQuery(strSQL);
			while (rs.next()) {
				// 获取系统当前时间
				SimpleDateFormat formatter = new SimpleDateFormat(
						"yyyy年MM月dd日HH:mm:ss");
				Date curDate = new Date(System.currentTimeMillis());// 获取当前时间
				String strCurrentTime = formatter.format(curDate);
				// 任务发布时间
				String strAnnounceTime = rs.getString(18);
				Date d1 = formatter.parse(strCurrentTime);
				Date d2 = formatter.parse(strAnnounceTime);
				long diff = d1.getTime() - d2.getTime();// 这样得到的差值是微秒级别
				TaskInfo task = new TaskInfo(rs.getString(16),
						rs.getString(22), rs.getString(2), rs.getString(15),
						rs.getInt(1) + "", rs.getDouble(20), rs.getDouble(21),
						strAnnounceTime, rs.getString(23), rs.getString(17),
						diff / 1000 + "", rs.getString(3), rs.getInt(24),
						rs.getInt(25), rs.getInt(14), rs.getInt(4),
						rs.getInt(5), rs.getInt(6), rs.getInt(7), rs.getInt(8),
						nNum, rs.getString(10), rs.getString(11),
						rs.getString(12), rs.getString(13));
				dynamicnews.add(task);
			}

			if (rs != null) {
				rs.close();
				rs = null;
			}

		} catch (Exception e) {
			System.out.print("get data error!");
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (connect != null) {
				try {
					connect.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return dynamicnews;
	}

	@Override
	public int UpdateTaskSelectType(String strAnnounceName, int nValue,
			String strTaskId, String strType) {
		int nRet = 0;
		Connection connect = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			connect = GetConnection.getSimpleConnection();
			stmt = connect.createStatement();
			int nTaskId = Integer.parseInt(strTaskId);
			if (strType.equals("1")) {
				// 更新数据库表(针对发布者)
				String strSQL = "update task_help_opera_table";
				strSQL += " set TaskSelectType = '";
				strSQL += nValue;
				strSQL += "' where TaskAccount = '";
				strSQL += strAnnounceName;
				strSQL += "' and TaskKey = '";
				strSQL += nTaskId;
				strSQL += "'";
				stmt.executeUpdate(strSQL);

				// 将更新标志设为更新状态
				strSQL = "update customer_info_table";
				strSQL += " set UpdateSignal = '1' where Account = '";
				strSQL += strAnnounceName;
				strSQL += "'";
				stmt.executeUpdate(strSQL);

				nRet = 1;
			} else if (strType.equals("2")) {
				// 更新数据库表(针对发布者)
				String strSQL = "update task_share_opera_table";
				strSQL += " set TaskSelectType = '";
				strSQL += nValue;
				strSQL += "' where TaskAccount = '";
				strSQL += strAnnounceName;
				strSQL += "' and TaskKey = '";
				strSQL += nTaskId;
				strSQL += "'";
				stmt.executeUpdate(strSQL);

				// 将更新标志设为更新状态
				strSQL = "update customer_info_table";
				strSQL += " set UpdateSignal = '1' where Account = '";
				strSQL += strAnnounceName;
				strSQL += "'";
				stmt.executeUpdate(strSQL);
				nRet = 1;
			}

		} catch (Exception e) {
			System.out.print("get data error!");
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (connect != null) {
				try {
					connect.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return nRet;
	}

	@Override
	public int UpdateTaskFinishType(int nTaskType, String strAnnounceName,
			int nValue, String strTaskId, String strBase64Image,
			String strCommentContent) {
		int nRet = 0;
		Connection connect = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			connect = GetConnection.getSimpleConnection();
			stmt = connect.createStatement();
			int nTaskId = Integer.parseInt(strTaskId);
			String strSQL = "";
			// 求助任务,此时strAnnounceName为发布者名称
			if (1 == nTaskType) {
				if (2 == nValue) {
					strSQL = "update task_help_opera_table";
					strSQL += " set TaskFinishType = '";
					strSQL += nValue;
					strSQL += "',TaskAccountCommentContent = '";
					strSQL += strCommentContent;
					strSQL += "',TaskAccountImage = '";
					strSQL += strBase64Image;
					strSQL += "' where TaskAccount = '";
					strSQL += strAnnounceName;
					strSQL += "' and TaskKey = '";
					strSQL += nTaskId;
					strSQL += "'";
				} else {
					strSQL = "update task_help_opera_table";
					strSQL += " set TaskFinishType = '";
					strSQL += nValue;
					strSQL += "' where TaskAccount = '";
					strSQL += strAnnounceName;
					strSQL += "' and TaskKey = '";
					strSQL += nTaskId;
					strSQL += "'";
				}
				stmt.executeUpdate(strSQL);

			} else if (2 == nTaskType) {// 分享任务,此时strAnnounceName为接收分享者
				if (2 == nValue) {
					strSQL = "update task_share_opera_table";
					strSQL += " set TaskFinishType = '";
					strSQL += nValue;
					strSQL += "',TaskAccountCommentContent = '";
					strSQL += strCommentContent;
					strSQL += "',TaskAccountImage = '";
					strSQL += strBase64Image;
					strSQL += "' where TaskImplementAccount = '";
					strSQL += strAnnounceName;
					strSQL += "' and TaskKey = '";
					strSQL += nTaskId;
					strSQL += "'";
				} else {
					strSQL = "update task_share_opera_table";
					strSQL += " set TaskFinishType = '";
					strSQL += nValue;
					strSQL += "' where TaskImplementAccount = '";
					strSQL += strAnnounceName;
					strSQL += "' and TaskKey = '";
					strSQL += nTaskId;
					strSQL += "'";
				}
				stmt.executeUpdate(strSQL);
			}

			// 将更新标志设为更新状态
			strSQL = "update customer_info_table";
			strSQL += " set UpdateSignal = '1' where Account = '";
			strSQL += strAnnounceName;
			strSQL += "'";
			stmt.executeUpdate(strSQL);

			nRet = 1;
		} catch (Exception e) {
			System.out.print("get data error!");
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (connect != null) {
				try {
					connect.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return nRet;
	}

	@Override
	public int UpdateTaskImplementCommentType(String strAnnounceName,
			int nValue, String strTaskId, String strType) {
		int nRet = 0;
		Connection connect = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			connect = GetConnection.getSimpleConnection();
			stmt = connect.createStatement();
			int nTaskId = Integer.parseInt(strTaskId);
			if (strType.equals("1")) {
				String strSQL = "update task_help_opera_table";
				strSQL += " set TaskImplementCommentType = '";
				strSQL += nValue;
				strSQL += "' where TaskAccount = '";
				strSQL += strAnnounceName;
				strSQL += "' and TaskKey = '";
				strSQL += nTaskId;
				strSQL += "'";
				stmt.executeUpdate(strSQL);

				// 将更新标志设为更新状态
				strSQL = "update customer_info_table";
				strSQL += " set UpdateSignal = '1' where Account = '";
				strSQL += strAnnounceName;
				strSQL += "'";
				stmt.executeUpdate(strSQL);

				nRet = 1;
			} else if (strType.equals("2")) {
				String strSQL = "update task_share_opera_table";
				strSQL += " set TaskImplementCommentType = '";
				strSQL += nValue;
				strSQL += "' where TaskAccount = '";
				strSQL += strAnnounceName;
				strSQL += "' and TaskKey = '";
				strSQL += nTaskId;
				strSQL += "'";
				stmt.executeUpdate(strSQL);

				// 将更新标志设为更新状态
				strSQL = "update customer_info_table";
				strSQL += " set UpdateSignal = '1' where Account = '";
				strSQL += strAnnounceName;
				strSQL += "'";
				stmt.executeUpdate(strSQL);

				nRet = 1;
			}
		} catch (Exception e) {
			System.out.print("get data error!");
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (connect != null) {
				try {
					connect.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return nRet;
	}

	@Override
	public int UpdateTaskVerifiType(int nTaskType, String strAnnounceName,
			int nValue, String strTaskId, String strBase64Image,
			String strCommentContent) {
		int nRet = 0;
		Connection connect = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			connect = GetConnection.getSimpleConnection();
			stmt = connect.createStatement();
			int nTaskId = Integer.parseInt(strTaskId);
			String strSQL = "";
			if (1 == nTaskType) {
				if (2 == nValue) {
					// 更新数据库(针对执行者)
					strSQL = "update task_help_opera_table";
					strSQL += " set TaskVerifiType = '";
					strSQL += nValue;
					strSQL += "',TaskImplementCommentContent = '";
					strSQL += strCommentContent;
					strSQL += "',TaskImplementImage = '";
					strSQL += strBase64Image;
					strSQL += "' where TaskImplementAccount = '";
					strSQL += strAnnounceName;
					strSQL += "' and TaskKey = '";
					strSQL += nTaskId;
					strSQL += "'";
				} else {
					// 更新数据库(针对执行者)
					strSQL = "update task_help_opera_table";
					strSQL += " set TaskVerifiType = '";
					strSQL += nValue;
					strSQL += "' where TaskImplementAccount = '";
					strSQL += strAnnounceName;
					strSQL += "' and TaskKey = '";
					strSQL += nTaskId;
					strSQL += "'";
				}
				stmt.executeUpdate(strSQL);

			} else if (2 == nTaskType) {
				if (2 == nValue) {
					// 更新数据库(针对分享者)
					strSQL = "update task_share_opera_table";
					strSQL += " set TaskVerifiType = '";
					strSQL += nValue;
					strSQL += "',TaskImplementCommentContent = '";
					strSQL += strCommentContent;
					strSQL += "',TaskImplementImage = '";
					strSQL += strBase64Image;
					strSQL += "' where TaskAccount = '";
					strSQL += strAnnounceName;
					strSQL += "' and TaskKey = '";
					strSQL += nTaskId;
					strSQL += "'";
				} else {
					// 更新数据库(针对分享者)
					strSQL = "update task_share_opera_table";
					strSQL += " set TaskVerifiType = '";
					strSQL += nValue;
					strSQL += "' where TaskAccount = '";
					strSQL += strAnnounceName;
					strSQL += "' and TaskKey = '";
					strSQL += nTaskId;
					strSQL += "'";
				}

				stmt.executeUpdate(strSQL);
			}

			// 将更新标志设为更新状态
			strSQL = "update customer_info_table";
			strSQL += " set UpdateSignal = '1' where Account = '";
			strSQL += strAnnounceName;
			strSQL += "'";
			stmt.executeUpdate(strSQL);

			nRet = 1;
		} catch (Exception e) {
			System.out.print("get data error!");
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (connect != null) {
				try {
					connect.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return nRet;
	}

	@Override
	public int UpdateTaskAnnounceCommentType(String strAnnounceName,
			int nValue, String strTaskId, String strType) {
		int nRet = 0;
		Connection connect = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			connect = GetConnection.getSimpleConnection();
			stmt = connect.createStatement();
			int nTaskId = Integer.parseInt(strTaskId);
			String strSQL = "";
			if (strType.equals("1")) {
				strSQL = "update task_help_opera_table";
				strSQL += " set TaskAnnounceCommentType = '";
				strSQL += nValue;
				strSQL += "' where TaskImplementAccount = '";
				strSQL += strAnnounceName;
				strSQL += "' and TaskKey = '";
				strSQL += nTaskId;
				strSQL += "'";
				stmt.executeUpdate(strSQL);
			} else if (strType.equals("2")) {
				strSQL = "update task_share_opera_table";
				strSQL += " set TaskAnnounceCommentType = '";
				strSQL += nValue;
				strSQL += "' where TaskImplementAccount = '";
				strSQL += strAnnounceName;
				strSQL += "' and TaskKey = '";
				strSQL += nTaskId;
				strSQL += "'";
				stmt.executeUpdate(strSQL);
			}
			// 将更新标志设为更新状态
			strSQL = "update customer_info_table";
			strSQL += " set UpdateSignal = '1' where Account = '";
			strSQL += strAnnounceName;
			strSQL += "'";
			stmt.executeUpdate(strSQL);

			nRet = 1;
		} catch (Exception e) {
			System.out.print("get data error!");
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (connect != null) {
				try {
					connect.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return nRet;
	}

	@Override
	public List<CommentInfo> GetCommentsForTask(String strTaskId, String strType) {
		List<CommentInfo> commentinfos = new ArrayList<CommentInfo>();
		Connection connect = null;
		Statement stmt = null;
		Statement stmt1 = null;
		ResultSet rs = null;
		try {
			connect = GetConnection.getSimpleConnection();
			stmt = connect.createStatement();
			// 评论人的名称
			String strCommentPersonName;
			// 被评论人的名称
			String strCommentReceivePersonName;
			// 评论时间
			String strCommentTime;
			// 评论内容
			String strCommentContent;
			
			int nTaskId = Integer.parseInt(strTaskId);
			String strCommentTableName = "";
			if (strType.equals("1")) {
				// 根据任务id获取到评论表名称
				String strSQL = "select * from task_help_opera_table";
				strSQL += " where TaskKey = '";
				strSQL += nTaskId;
				strSQL += "'";
				rs = stmt.executeQuery(strSQL);
				while (rs.next()) {
					strCommentTableName = rs.getString(9);
					break;
				}
				if (rs != null) {
					rs.close();
					rs = null;
				}
				// 根据获取到的评论表名称获取到相应数据
				strSQL = "select * from ";
				strSQL += strCommentTableName;
				rs = stmt.executeQuery(strSQL);
				while (rs.next()) {
					// 从评论表中取出数据
					strCommentPersonName = rs.getString(3);
					strCommentReceivePersonName = rs.getString(4);
					strCommentTime = rs.getString(2);
					strCommentContent = rs.getString(5);
					CommentInfo comment = new CommentInfo(rs.getString(6),
							strCommentPersonName, strCommentReceivePersonName,
							strCommentTime, strCommentContent);
					commentinfos.add(comment);
				}
			} else if (strType.equals("2")) {
				// 根据任务id获取到评论表名称
				String strSQL = "select * from task_share_opera_table";
				strSQL += " where TaskKey = '";
				strSQL += nTaskId;
				strSQL += "'";
				rs = stmt.executeQuery(strSQL);
				while (rs.next()) {
					strCommentTableName = rs.getString(9);
					break;
				}
				if (rs != null) {
					rs.close();
					rs = null;
				}
				// 根据获取到的评论表名称获取到相应数据
				strSQL = "select * from ";
				strSQL += strCommentTableName;
				rs = stmt.executeQuery(strSQL);
				while (rs.next()) {
					// 从评论表中取出数据
					strCommentPersonName = rs.getString(3);
					strCommentReceivePersonName = rs.getString(4);
					strCommentTime = rs.getString(2);
					strCommentContent = rs.getString(5);
					CommentInfo comment = new CommentInfo(rs.getString(6),
							strCommentPersonName, strCommentReceivePersonName,
							strCommentTime, strCommentContent);
					commentinfos.add(comment);
				}
			}
		} catch (Exception e) {
			System.out.print("get data error!");
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (stmt1 != null) {
				try {
					stmt1.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (connect != null) {
				try {
					connect.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return commentinfos;
	}

	@Override
	public int SendCommentContent(String strTaskId,
			String strCommentPersonName, String strReceiveCommentPersonName,
			String strCommentContent, String strCommentPersonImage,
			String strType) {

		int nRet = 0;
		Connection connect = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			connect = GetConnection.getSimpleConnection();
			stmt = connect.createStatement();
			// 评论表名称
			String strCommentTableName = "";
			// 任务发布人名称
			String strTaskAnnouncePersonName = "";
			// 任务执行人名称
			String strTaskImplePersonName = "";
			int nTaskId = Integer.parseInt(strTaskId);
			if (strType.equals("1")) {
				// 先根据strTaskId获取到评论表
				String strSQL = "select * from task_help_opera_table";
				strSQL += " where TaskKey = '";
				strSQL += nTaskId;
				strSQL += "'";
				rs = stmt.executeQuery(strSQL);
				while (rs.next()) {
					strCommentTableName = rs.getString(9);
					strTaskAnnouncePersonName = rs.getString(2);
					strTaskImplePersonName = rs.getString(3);
					break;
				}
				// 如果评论人是任务发布人
				if (strCommentPersonName.equals(strTaskAnnouncePersonName)) {
					if (!strReceiveCommentPersonName.equals("")) {
						// 如果指定了接收人,那么就给接收人提示
						strSQL = "update task_help_opera_table";
						strSQL += " set TaskAnnounceCommentType = '2'";
						strSQL += " where TaskKey = '";
						strSQL += nTaskId;
						strSQL += "'";
						stmt.executeUpdate(strSQL);

						// 将更新标志设为更新状态
						strSQL = "update customer_info_table";
						strSQL += " set UpdateSignal = '1' where Account = '";
						strSQL += strReceiveCommentPersonName;
						strSQL += "'";
						stmt.executeUpdate(strSQL);
					}
				} else if (strCommentPersonName.equals(strTaskImplePersonName)) {// 如果评论人是任务执行人
					// 如果指定了接收人,那么不管什么情况都给对方提示
					strSQL = "update task_help_opera_table";
					strSQL += " set TaskImplementCommentType = '2'";
					strSQL += " where TaskKey = '";
					strSQL += nTaskId;
					strSQL += "'";
					stmt.executeUpdate(strSQL);

					// 将更新标志设为更新状态
					strSQL = "update customer_info_table";
					strSQL += " set UpdateSignal = '1' where Account = '";
					strSQL += strTaskAnnouncePersonName;
					strSQL += "'";
					stmt.executeUpdate(strSQL);
				}
				// 获取当前时间
				SimpleDateFormat formatter = new SimpleDateFormat(
						"yyyy年MM月dd日HH:mm:ss");
				Date curDate = new Date(System.currentTimeMillis());// 获取当前时间
				String strTaskAnnounceTime = formatter.format(curDate);
				// 将数据插入到表中
				strSQL = "insert into ";
				strSQL += strCommentTableName;
				strSQL += " values('";
				strSQL += strTaskId;
				strSQL += "','";
				strSQL += strTaskAnnounceTime;
				strSQL += "','";
				strSQL += strCommentPersonName;
				strSQL += "','";
				strSQL += strReceiveCommentPersonName;
				strSQL += "','";
				strSQL += strCommentContent;
				strSQL += "','";
				strSQL += strCommentPersonImage;
				strSQL += "')";
				stmt.execute(strSQL);

				nRet = 1;
			} else if (strType.endsWith("2")) {
				// 先根据strTaskId获取到评论表
				String strSQL = "select * from task_share_opera_table";
				strSQL += " where TaskKey = '";
				strSQL += nTaskId;
				strSQL += "'";
				rs = stmt.executeQuery(strSQL);
				while (rs.next()) {
					strCommentTableName = rs.getString(9);
					strTaskAnnouncePersonName = rs.getString(2);
					strTaskImplePersonName = rs.getString(3);
					break;
				}
				// 如果评论人是任务发布人
				if (strCommentPersonName.equals(strTaskAnnouncePersonName)) {
					if (!strReceiveCommentPersonName.equals("")) {
						// 如果指定了接收人,那么就给接收人提示
						strSQL = "update task_share_opera_table";
						strSQL += " set TaskAnnounceCommentType = '2'";
						strSQL += " where TaskKey = '";
						strSQL += nTaskId;
						strSQL += "'";
						stmt.executeUpdate(strSQL);

						// 将更新标志设为更新状态
						strSQL = "update customer_info_table";
						strSQL += " set UpdateSignal = '1' where Account = '";
						strSQL += strReceiveCommentPersonName;
						strSQL += "'";
						stmt.executeUpdate(strSQL);
					}
				} else if (strCommentPersonName.equals(strTaskImplePersonName)) {// 如果评论人是任务执行人
					// 如果指定了接收人,那么不管什么情况都给对方提示
					strSQL = "update task_share_opera_table";
					strSQL += " set TaskImplementCommentType = '2'";
					strSQL += " where TaskKey = '";
					strSQL += nTaskId;
					strSQL += "'";
					stmt.executeUpdate(strSQL);

					// 将更新标志设为更新状态
					strSQL = "update customer_info_table";
					strSQL += " set UpdateSignal = '1' where Account = '";
					strSQL += strTaskAnnouncePersonName;
					strSQL += "'";
					stmt.executeUpdate(strSQL);
				}
				// 获取当前时间
				SimpleDateFormat formatter = new SimpleDateFormat(
						"yyyy年MM月dd日HH:mm:ss");
				Date curDate = new Date(System.currentTimeMillis());// 获取当前时间
				String strTaskAnnounceTime = formatter.format(curDate);
				// 将数据插入到表中
				strSQL = "insert into ";
				strSQL += strCommentTableName;
				strSQL += " values('";
				strSQL += nTaskId;
				strSQL += "','";
				strSQL += strTaskAnnounceTime;
				strSQL += "','";
				strSQL += strCommentPersonName;
				strSQL += "','";
				strSQL += strReceiveCommentPersonName;
				strSQL += "','";
				strSQL += strCommentContent;
				strSQL += "','";
				strSQL += strCommentPersonImage;
				strSQL += "')";
				stmt.execute(strSQL);

				nRet = 1;
			}
		} catch (Exception e) {
			System.out.print("get data error!");
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (connect != null) {
				try {
					connect.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return nRet;

	}

	@Override
	public UpdateData GetUpdateSignal(String strCurrentAccountName) {
		UpdateData update = new UpdateData(-1, "");
		int nRet = -1;
		Connection connect = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			connect = GetConnection.getSimpleConnection();
			stmt = connect.createStatement();
			// 将更新标志设为更新状态
			String strSQL = "select * from customer_info_table where Account = '";
			strSQL += strCurrentAccountName;
			strSQL += "'";
			rs = stmt.executeQuery(strSQL);
			while (rs.next()) {
				nRet = rs.getInt(12);
				break;
			}
			if (rs != null) {
				rs.close();
				rs = null;
			}
			String strStatusInfo = "";
			if (1 == nRet) {
				// 针对求助任务
				strSQL = "select * from task_help_opera_table where TaskImplementAccount = '";
				strSQL += strCurrentAccountName;
				strSQL += "' or TaskAccount = '";
				strSQL += strCurrentAccountName;
				strSQL += "'";
				rs = stmt.executeQuery(strSQL);
				while (rs.next()) {
					String strAccounceName = rs.getString(2);
					// String strId = rs.getString(1);
					String strImpleAccouceName = rs.getString(3);
					// 根据任务id获取任务标题名称
					String strTitle = rs.getString(15);
					// 根据任务id获取任务类型
					int nTaskType = rs.getInt(14);
					// 分析数据开始
					// boolean bIsTure = false;
					int nTaskSelectType = rs.getInt(4);
					int nTaskFinishType = rs.getInt(5);
					int nTaskVerifiType = rs.getInt(6);
					int nTaskAnnounceCommentType = rs.getInt(7);
					int nTaskImplementCommentType = rs.getInt(8);
					// 如果这个任务是由当前用户创建的或者是由当前用户分享的
					if (strCurrentAccountName.equals(strAccounceName)) {
						boolean b3 = !strImpleAccouceName.equals("");
						if (b3) {
							if (2 == nTaskSelectType) {
								if (1 == nTaskType) {
									strStatusInfo += strImpleAccouceName
											+ "拿下了你发布的标题为'" + strTitle + "'的任务";
								}
								if (2 == nTaskType) {
									strStatusInfo += strImpleAccouceName
											+ "抢下了你发布的标题为'" + strTitle + "'的分享";
								}
								// bIsTure = true;
							}
							if (1 == nTaskType) {
								if (2 == nTaskFinishType) {
									strStatusInfo += strImpleAccouceName
											+ "完成了你发布的标题为'" + strTitle + "'的任务";
									// bIsTure = true;
								}
							} else if (2 == nTaskType) {
								if (2 == nTaskVerifiType) {
									strStatusInfo += strImpleAccouceName
											+ "确定了" + strTitle + "'的分享";
									// bIsTure = true;
								}
							}
							if (2 == nTaskImplementCommentType) {
								if (1 == nTaskType) {
									strStatusInfo += strImpleAccouceName
											+ "对你发布的标题为'" + strTitle
											+ "'的任务评论了";
								}
								if (2 == nTaskType) {
									strStatusInfo += strImpleAccouceName
											+ "对你发布的标题为'" + strTitle
											+ "'的分享评论了";
								}
								// bIsTure = true;
							}
							/*
							 * if (bIsTure) { break; }
							 */
						}
					} else if (strCurrentAccountName
							.equals(strImpleAccouceName)) {// 如果这个任务是由当前用户执行的或者接收分享的

						if (1 == nTaskType) {
							if (2 == nTaskVerifiType) {
								strStatusInfo += strAccounceName + "对你执行的标题为'"
										+ strTitle + "'的任务验证了";
								// bIsTure = true;
							}
						} else if (2 == nTaskType) {
							if (2 == nTaskFinishType) {
								strStatusInfo += strAccounceName + "完成了标题为'"
										+ strTitle + "'的分享";
								// bIsTure = true;
							}
						}
						if (2 == nTaskAnnounceCommentType) {
							if (1 == nTaskType) {
								strStatusInfo += strAccounceName + "对你执行的标题为'"
										+ strTitle + "'的任务评论了";
							}
							if (2 == nTaskType) {
								strStatusInfo += strAccounceName + "对你接收的标题为'"
										+ strTitle + "'的分享评论了";
							}
							// bIsTure = true;
						}
						/*
						 * if (bIsTure) { break; }
						 */
					}
					// 分析数据结尾
				}
				if (rs != null) {
					rs.close();
					rs = null;
				}
				// 针对分享任务
				strSQL = "select * from task_share_opera_table where TaskImplementAccount = '";
				strSQL += strCurrentAccountName;
				strSQL += "' or TaskAccount = '";
				strSQL += strCurrentAccountName;
				strSQL += "'";
				rs = stmt.executeQuery(strSQL);
				while (rs.next()) {
					String strAccounceName = rs.getString(2);
					// String strId = rs.getString(1);
					String strImpleAccouceName = rs.getString(3);
					// 根据任务id获取任务标题名称
					String strTitle = rs.getString(15);
					// 根据任务id获取任务类型
					int nTaskType = rs.getInt(14);
					// 分析数据开始
					// boolean bIsTure = false;
					int nTaskSelectType = rs.getInt(4);
					int nTaskFinishType = rs.getInt(5);
					int nTaskVerifiType = rs.getInt(6);
					int nTaskAnnounceCommentType = rs.getInt(7);
					int nTaskImplementCommentType = rs.getInt(8);
					// 如果这个任务是由当前用户创建的或者是由当前用户分享的
					if (strCurrentAccountName.equals(strAccounceName)) {
						boolean b3 = !strImpleAccouceName.equals("");
						if (b3) {
							if (2 == nTaskSelectType) {
								if (1 == nTaskType) {
									strStatusInfo += strImpleAccouceName
											+ "拿下了你发布的标题为'" + strTitle + "'的任务";
								}
								if (2 == nTaskType) {
									strStatusInfo += strImpleAccouceName
											+ "抢下了你发布的标题为'" + strTitle + "'的分享";
								}
								// bIsTure = true;
							}
							if (1 == nTaskType) {
								if (2 == nTaskFinishType) {
									strStatusInfo += strImpleAccouceName
											+ "完成了你发布的标题为'" + strTitle + "'的任务";
									// bIsTure = true;
								}
							} else if (2 == nTaskType) {
								if (2 == nTaskVerifiType) {
									strStatusInfo += strImpleAccouceName
											+ "确定了" + strTitle + "'的分享";
									// bIsTure = true;
								}
							}
							if (2 == nTaskImplementCommentType) {
								if (1 == nTaskType) {
									strStatusInfo += strImpleAccouceName
											+ "对你发布的标题为'" + strTitle
											+ "'的任务评论了";
								}
								if (2 == nTaskType) {
									strStatusInfo += strImpleAccouceName
											+ "对你发布的标题为'" + strTitle
											+ "'的分享评论了";
								}
								// bIsTure = true;
							}
							/*
							 * if (bIsTure) { break; }
							 */
						}
					} else if (strCurrentAccountName
							.equals(strImpleAccouceName)) {// 如果这个任务是由当前用户执行的或者接收分享的

						if (1 == nTaskType) {
							if (2 == nTaskVerifiType) {
								strStatusInfo += strAccounceName + "对你执行的标题为'"
										+ strTitle + "'的任务验证了";
								// bIsTure = true;
							}
						} else if (2 == nTaskType) {
							if (2 == nTaskFinishType) {
								strStatusInfo += strAccounceName + "完成了标题为'"
										+ strTitle + "'的分享";
								// bIsTure = true;
							}
						}
						if (2 == nTaskAnnounceCommentType) {
							if (1 == nTaskType) {
								strStatusInfo += strAccounceName + "对你执行的标题为'"
										+ strTitle + "'的任务评论了";
							}
							if (2 == nTaskType) {
								strStatusInfo += strAccounceName + "对你接收的标题为'"
										+ strTitle + "'的分享评论了";
							}
							// bIsTure = true;
						}
						/*
						 * if (bIsTure) { break; }
						 */
					}
					// 分析数据结尾
				}
			}
			update.setnUpdateSignal(nRet);
			update.setstrUpdateDescribe(strStatusInfo);
		} catch (Exception e) {
			System.out.print("get data error!");
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (connect != null) {
				try {
					connect.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return update;
	}

	@Override
	public int SetUpdateSignal(String strCurrentAccountName, int nSignal) {
		int nRet = 0;
		Connection connect = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			connect = GetConnection.getSimpleConnection();
			stmt = connect.createStatement();
			// 将更新标志设为更新状态
			String strSQL = "update customer_info_table";
			strSQL += " set UpdateSignal = '";
			strSQL += nSignal;
			strSQL += "' where Account = '";
			strSQL += strCurrentAccountName;
			strSQL += "'";
			stmt.executeUpdate(strSQL);
			nRet = 1;
		} catch (Exception e) {
			System.out.print("get data error!");
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (connect != null) {
				try {
					connect.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return nRet;
	}

	@Override
	public int SetCreditValue(String strPersonName, int nCreditValue) {
		int nRet = 0;
		Connection connect = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			connect = GetConnection.getSimpleConnection();
			stmt = connect.createStatement();
			// 将更新标志设为更新状态
			String strSQL = "update customer_info_table";
			strSQL += " set CreditValue = '";
			strSQL += nCreditValue;
			strSQL += "' where Account = '";
			strSQL += strPersonName;
			strSQL += "'";
			stmt.executeUpdate(strSQL);
			nRet = 1;
		} catch (Exception e) {
			System.out.print("get data error!");
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (connect != null) {
				try {
					connect.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return nRet;
	}

	@Override
	public int SetCharmValue(String strPersonName, int nCharmValue) {
		int nRet = 0;
		Connection connect = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			connect = GetConnection.getSimpleConnection();
			stmt = connect.createStatement();
			// 将更新标志设为更新状态
			String strSQL = "update customer_info_table";
			strSQL += " set CharmValue = '";
			strSQL += nCharmValue;
			strSQL += "' where Account = '";
			strSQL += strPersonName;
			strSQL += "'";
			stmt.executeUpdate(strSQL);
			nRet = 1;
		} catch (Exception e) {
			System.out.print("get data error!");
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (connect != null) {
				try {
					connect.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return nRet;
	}

	@Override
	public int GetCreditValue(String strPersonName) {
		int nRet = -1;
		Connection connect = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			connect = GetConnection.getSimpleConnection();
			stmt = connect.createStatement();
			// 将更新标志设为更新状态
			String strSQL = "select * from customer_info_table";
			strSQL += " where Account = '";
			strSQL += strPersonName;
			strSQL += "'";
			rs = stmt.executeQuery(strSQL);
			while (rs.next()) {
				nRet = rs.getInt(13);
			}
		} catch (Exception e) {
			System.out.print("get data error!");
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (connect != null) {
				try {
					connect.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return nRet;
	}

	@Override
	public int GetCharmValue(String strPersonName) {
		int nRet = -1;
		Connection connect = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			connect = GetConnection.getSimpleConnection();
			stmt = connect.createStatement();
			// 将更新标志设为更新状态
			String strSQL = "select * from customer_info_table";
			strSQL += " where Account = '";
			strSQL += strPersonName;
			strSQL += "'";
			rs = stmt.executeQuery(strSQL);
			while (rs.next()) {
				nRet = rs.getInt(14);
			}
		} catch (Exception e) {
			System.out.print("get data error!");
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (connect != null) {
				try {
					connect.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return nRet;
	}

	@Override
	public int AddCreditValue(String strPersonName, int nIncrValue) {
		int nRet = 0;
		Connection connect = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			connect = GetConnection.getSimpleConnection();
			stmt = connect.createStatement();
			int nSumCreditValue = 0;
			if (nIncrValue > 0) {
				// 先取出人品值
				String strSQL = "select * from customer_info_table where Account = '";
				strSQL += strPersonName;
				strSQL += "'";
				rs = stmt.executeQuery(strSQL);
				while (rs.next()) {
					nSumCreditValue = rs.getInt(13) + nIncrValue;
				}
				// 将更新标志设为更新状态
				strSQL = "update customer_info_table";
				strSQL += " set CreditValue = '";
				strSQL += nSumCreditValue;
				strSQL += "' where Account = '";
				strSQL += strPersonName;
				strSQL += "'";
				stmt.executeUpdate(strSQL);
				nRet = 1;
			} else if (0 == nIncrValue) {
				nRet = 1;
			}

		} catch (Exception e) {
			System.out.print("get data error!");
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (connect != null) {
				try {
					connect.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return nRet;
	}

	@Override
	public int AddCharmValue(String strPersonName, int nIncrValue) {
		int nRet = 0;
		Connection connect = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			connect = GetConnection.getSimpleConnection();
			stmt = connect.createStatement();
			int nSumCreditValue = 0;
			if (nIncrValue > 0) {
				// 先取出人品值
				String strSQL = "select * from customer_info_table where Account = '";
				strSQL += strPersonName;
				strSQL += "'";
				rs = stmt.executeQuery(strSQL);
				while (rs.next()) {
					nSumCreditValue = rs.getInt(14) + nIncrValue;
				}
				// 将更新标志设为更新状态
				strSQL = "update customer_info_table";
				strSQL += " set CharmValue = '";
				strSQL += nSumCreditValue;
				strSQL += "' where Account = '";
				strSQL += strPersonName;
				strSQL += "'";
				stmt.executeUpdate(strSQL);
				nRet = 1;
			} else if (0 == nIncrValue) {
				nRet = 0;
			}

		} catch (Exception e) {
			System.out.print("get data error!");
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (connect != null) {
				try {
					connect.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return nRet;
	}

	@Override
	public long GetTaskRemainTime(String strTaskId, String strType) {
		long lRemainTime = -1;
		Connection connect = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			connect = GetConnection.getSimpleConnection();
			stmt = connect.createStatement();
			int nTaskId = Integer.parseInt(strTaskId);
			String strSQL = "";
			if (strType.equals("1")) {
				strSQL = "select * from task_help_opera_table where TaskKey = '";
				strSQL += nTaskId;
				strSQL += "'";
				rs = stmt.executeQuery(strSQL);
				// 获取系统当前时间
				SimpleDateFormat formatter = new SimpleDateFormat(
						"yyyy年MM月dd日HH:mm:ss");
				Date curDate = new Date(System.currentTimeMillis());// 获取当前时间
				String strCurrentTime = formatter.format(curDate);

				while (rs.next()) {
					// 任务发布时间
					String strAnnounceTime = rs.getString(18);
					Date d1 = formatter.parse(strCurrentTime);
					Date d2 = formatter.parse(strAnnounceTime);
					long diff = d1.getTime() - d2.getTime();// 这样得到的差值是微秒级别
					// 获取还剩多少时间
					String strTimeLimit = rs.getString(23);
					long lTimeLimit = Long.parseLong(strTimeLimit);
					lRemainTime = lTimeLimit - diff / 1000;
					break;
				}
			} else if (strType.equals("2")) {
				strSQL = "select * from task_share_opera_table where TaskKey = '";
				strSQL += nTaskId;
				strSQL += "'";
				rs = stmt.executeQuery(strSQL);
				// 获取系统当前时间
				SimpleDateFormat formatter = new SimpleDateFormat(
						"yyyy年MM月dd日HH:mm:ss");
				Date curDate = new Date(System.currentTimeMillis());// 获取当前时间
				String strCurrentTime = formatter.format(curDate);

				while (rs.next()) {
					// 任务发布时间
					String strAnnounceTime = rs.getString(18);
					Date d1 = formatter.parse(strCurrentTime);
					Date d2 = formatter.parse(strAnnounceTime);
					long diff = d1.getTime() - d2.getTime();// 这样得到的差值是微秒级别
					// 获取还剩多少时间
					String strTimeLimit = rs.getString(23);
					long lTimeLimit = Long.parseLong(strTimeLimit);
					lRemainTime = lTimeLimit - diff / 1000;
					break;
				}
			}

		} catch (Exception e) {
			System.out.print("get data error!");
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (connect != null) {
				try {
					connect.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return lRemainTime;
	}

	// 加载没有到期的求助或分享任务数据,nLimit为一次加载的数据最大条数,nType为类型,1表示求助,
	// 2表示分享,nMaxTaskId表示最多能加载到的任务号
	@Override
	public List<TaskInfo> LoadTaskData(int nLimit, int nType, int nMaxTaskId) {
		List<TaskInfo> tasks = new ArrayList<TaskInfo>();
		Connection connect = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			connect = GetConnection.getSimpleConnection();
			stmt = connect.createStatement();
			String strSQL = "";
			if (1 == nType) {
				strSQL = "select * from task_help_opera_table where TaskKey < ";
				strSQL += nMaxTaskId;
				strSQL += " order by TaskKey desc Limit ";
				strSQL += 0;
				strSQL += ",";
				strSQL += nLimit;
			} else if (2 == nType) {
				strSQL = "select * from task_share_opera_table where TaskKey < ";
				strSQL += nMaxTaskId;
				strSQL += " order by TaskKey desc Limit ";
				strSQL += 0;
				strSQL += ",";
				strSQL += nLimit;
			}
			rs = stmt.executeQuery(strSQL);
			tasks.clear();
			// 获取系统当前时间
			SimpleDateFormat formatter = new SimpleDateFormat(
					"yyyy年MM月dd日HH:mm:ss");
			Date curDate = new Date(System.currentTimeMillis());// 获取当前时间
			String strCurrentTime = formatter.format(curDate);

			while (rs.next()) {
				// 任务发布时间
				String strAnnounceTime = rs.getString(18);
				Date d1 = formatter.parse(strCurrentTime);
				Date d2 = formatter.parse(strAnnounceTime);
				long diff = d1.getTime() - d2.getTime();// 这样得到的差值是微秒级别
				//long nLimitTime = Long.parseLong(rs.getString(23));
				// 判断是否到期,如果没有到期
				//if (diff / 1000 - nLimitTime < 0) {
					TaskInfo task = new TaskInfo(rs.getString(16),
							rs.getString(22), rs.getString(2),
							rs.getString(15), rs.getInt(1) + "",
							rs.getDouble(20), rs.getDouble(21),
							strAnnounceTime, rs.getString(23),
							rs.getString(17), diff / 1000 + "",
							rs.getString(3), rs.getInt(24), rs.getInt(25),
							rs.getInt(14), rs.getInt(4), rs.getInt(5),
							rs.getInt(6), rs.getInt(7), rs.getInt(8), 0,
							rs.getString(10), rs.getString(11),
							rs.getString(12), rs.getString(13));
					tasks.add(task);
				//}

			}
		} catch (Exception e) {
			System.out.print("get data error!");
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (connect != null) {
				try {
					connect.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return tasks;
	}

	@Override
	public List<TaskInfo> UpdateTaskData(int nLimit, int nType, int nMaxTaskId) {
		List<TaskInfo> tasks = new ArrayList<TaskInfo>();
		Connection connect = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			connect = GetConnection.getSimpleConnection();
			stmt = connect.createStatement();
			String strSQL = "";
			if (1 == nType) {
				strSQL = "select * from task_help_opera_table where TaskKey > ";
				strSQL += nMaxTaskId;
				strSQL += " order by TaskKey desc Limit ";
				strSQL += 0;
				strSQL += ",";
				strSQL += nLimit;
			} else if (2 == nType) {
				strSQL = "select * from task_share_opera_table where TaskKey > ";
				strSQL += nMaxTaskId;
				strSQL += " order by TaskKey desc Limit ";
				strSQL += 0;
				strSQL += ",";
				strSQL += nLimit;
			}
			rs = stmt.executeQuery(strSQL);
			tasks.clear();
			// 获取系统当前时间
			SimpleDateFormat formatter = new SimpleDateFormat(
					"yyyy年MM月dd日HH:mm:ss");
			Date curDate = new Date(System.currentTimeMillis());// 获取当前时间
			String strCurrentTime = formatter.format(curDate);

			while (rs.next()) {
				// 任务发布时间
				String strAnnounceTime = rs.getString(18);
				Date d1 = formatter.parse(strCurrentTime);
				Date d2 = formatter.parse(strAnnounceTime);
				long diff = d1.getTime() - d2.getTime();// 这样得到的差值是微秒级别
				//long nLimitTime = Long.parseLong(rs.getString(23));
				// 判断是否到期,如果没有到期
				//if (diff / 1000 - nLimitTime < 0) {
					TaskInfo task = new TaskInfo(rs.getString(16),
							rs.getString(22), rs.getString(2),
							rs.getString(15), rs.getInt(1) + "",
							rs.getDouble(20), rs.getDouble(21),
							strAnnounceTime, rs.getString(23),
							rs.getString(17), diff / 1000 + "",
							rs.getString(3), rs.getInt(24), rs.getInt(25),
							rs.getInt(14), rs.getInt(4), rs.getInt(5),
							rs.getInt(6), rs.getInt(7), rs.getInt(8), 0,
							rs.getString(10), rs.getString(11),
							rs.getString(12), rs.getString(13));
					tasks.add(task);
				//}
			}
		} catch (Exception e) {
			System.out.print("get data error!");
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (connect != null) {
				try {
					connect.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return tasks;
	}
}
